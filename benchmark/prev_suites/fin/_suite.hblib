;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GENERIC FUNCTIONS ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(input fact In (.x Int))

;;; independent_choices

(output fact Step1)
(output fact Step2)
(output fact Step3)
(output fact Step4)
(output fact Step5)
(output fact Step6)
(output fact Step7)
(output fact Step8)
(output fact Step9)
(output fact Step10)

(computation a1 Step1 ((in In)) ())
(computation b1 Step1 ((in In)) ())
(computation c1 Step1 ((in In)) ())
(computation d1 Step1 ((in In)) ())
(computation e1 Step1 ((in In)) ())

(computation a2 Step2 ((in Step1)) ())
(computation b2 Step2 ((in Step1)) ())
(computation c2 Step2 ((in Step1)) ())
(computation d2 Step2 ((in Step1)) ())
(computation e2 Step2 ((in Step1)) ())

(computation a3 Step3 ((in Step2)) ())
(computation b3 Step3 ((in Step2)) ())
(computation c3 Step3 ((in Step2)) ())
(computation d3 Step3 ((in Step2)) ())
(computation e3 Step3 ((in Step2)) ())

(computation a4 Step4 ((in Step3)) ())
(computation b4 Step4 ((in Step3)) ())
(computation c4 Step4 ((in Step3)) ())
(computation d4 Step4 ((in Step3)) ())
(computation e4 Step4 ((in Step3)) ())

(computation a5 Step5 ((in Step4)) ())
(computation b5 Step5 ((in Step4)) ())
(computation c5 Step5 ((in Step4)) ())
(computation d5 Step5 ((in Step4)) ())
(computation e5 Step5 ((in Step4)) ())

(computation a6 Step6 ((in Step5)) ())
(computation b6 Step6 ((in Step5)) ())
(computation c6 Step6 ((in Step5)) ())
(computation d6 Step6 ((in Step5)) ())
(computation e6 Step6 ((in Step5)) ())

(computation a7 Step7 ((in Step6)) ())
(computation b7 Step7 ((in Step6)) ())
(computation c7 Step7 ((in Step6)) ())
(computation d7 Step7 ((in Step6)) ())
(computation e7 Step7 ((in Step6)) ())

(computation a8 Step8 ((in Step7)) ())
(computation b8 Step8 ((in Step7)) ())
(computation c8 Step8 ((in Step7)) ())
(computation d8 Step8 ((in Step7)) ())
(computation e8 Step8 ((in Step7)) ())

(computation a9 Step9 ((in Step8)) ())
(computation b9 Step9 ((in Step8)) ())
(computation c9 Step9 ((in Step8)) ())
(computation d9 Step9 ((in Step8)) ())
(computation e9 Step9 ((in Step8)) ())

(computation a10 Step10 ((in Step9)) ())
(computation b10 Step10 ((in Step9)) ())
(computation c10 Step10 ((in Step9)) ())
(computation d10 Step10 ((in Step9)) ())
(computation e10 Step10 ((in Step9)) ())

;;; rabbit_hole

(output fact RabbitHole)
(output fact RHGoal)

(computation rh_continue RabbitHole ((in RabbitHole)) ())
(computation rh RHGoal ((in RabbitHole)) ())
(computation non_rh RHGoal ((in In)) ())

;;; limited_cycle

(output fact LimitedCycle (.count Int))
(output fact LimitedCycleAnswer)

(computation start_lc LimitedCycle
  ((in In))
  ((= (.count ret) (.x in))))

(computation continue_lc LimitedCycle
  ((in LimitedCycle))
  ((< (.count ret) (.count in))
   (< 0 (.count ret))))

(computation end_lc LimitedCycleAnswer
  ((in LimitedCycle))
  ())

;;; branches

(output fact BranchTop)
(output fact BranchMid)

(computation btop BranchTop
  ((b1 BranchMid) (b2 BranchMid) (b3 BranchMid) (b4 BranchMid))
  ())

(computation bmid1 BranchMid
  ((in1 In) (in2 In))
  ())

(computation bmid2 BranchMid
  ((in1 In) (in2 In))
  ())

(computation bmid3 BranchMid
  ((in1 In) (in2 In))
  ())

(computation bmid_impossible1 BranchMid
  ((in1 In) (in2 In))
  ((= (.x in1) (.x in2))
   (< (.x in1) (.x in2))))

(computation bmid_impossible2 BranchMid
  ((in1 In) (in2 In))
  ((< (.x in2) (.x in1))
   (< (.x in1) (.x in2))))

;;; breadth_sorted

(output fact BreadthSorted)

(computation breadth_sorted BreadthSorted
  ((in1 In) (in2 In) (in3 In) (in4 In) (in5 In))
  ((< (.x in1) (.x in2))
   (< (.x in2) (.x in3))
   (< (.x in3) (.x in4))
   (< (.x in4) (.x in5))))

;;; depth_sorted

(output fact DepthSorted)

(output fact DS1 (.x Int))
(output fact DS2 (.x Int))
(output fact DS3 (.x Int))
(output fact DS4 (.x Int))

(computation as0 DepthSorted
  ((in DS1)) ())

(computation as1 DS1
  ((in DS2))
  ((< (.x ret) (.x in))))

(computation as2 DS2
  ((in DS3))
  ((< (.x ret) (.x in))))

(computation as3 DS3
  ((in DS4))
  ((< (.x ret) (.x in))))

(computation as4 DS4
  ((in In))
  ((< (.x ret) (.x in))))

;;; same

(output fact Same)
(output fact SameOption (.x Int))

(computation same Same
  ((s1 SameOption) (s2 SameOption) (s3 SameOption) (s4 SameOption)
   (s5 SameOption) (s6 SameOption) (s7 SameOption) (s8 SameOption)
   (s9 SameOption) (s10 SameOption))
  ((= (.x s1) (.x s2))
   (= (.x s2) (.x s3))
   (= (.x s3) (.x s4))
   (= (.x s4) (.x s5))
   (= (.x s5) (.x s6))
   (= (.x s6) (.x s7))
   (= (.x s7) (.x s8))
   (= (.x s8) (.x s9))
   (= (.x s9) (.x s10))))

(computation same_option SameOption
  ((in In))
  ((= (.x ret) (.x in))))

;;; descending_tree

(output fact DTree (.x Int))

(computation dtree DTree
  ((dt1 DTree) (dt2 DTree))
  ((< (.x dt1) (.x ret))
   (< (.x dt2) (.x ret))
   (< (.x dt2) (.x dt1))))

(computation dtree_leaf DTree
  () ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; BIOINFORMATICS ANALYSES ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Raw inputs

(input fact Seq
  (.sample Str) (.at Int) (.data Str))

(input fact ReferenceGenome
  (.data Str))

; Datatypes

(output fact Reference
  (.data Str))

(output fact Alignment
  (.sample Str) (.at Int))

(output fact ReadCounts
  (.sample Str) (.at Int))

(output fact ReadCountMatrix
  (.sample1 Str) (.sample2 Str) (.at Int) (.bc Int))

(output fact DifferentialGeneExpression
  (.sample1 Str) (.sample2 Str) (.at Int))

; Load reference genome

(computation load_local_reference_genome Reference
  ((rg ReferenceGenome))
  ((= (.data ret) (.data rg))))

(computation load_hg38 Reference () ())

; Quantifiers

(computation kallisto ReadCounts
  ((seq Seq) (ref Reference))
  ((= (.sample ret) (.sample seq))
   (= (.at ret) (.at seq))))

(computation salmon ReadCounts
  ((seq Seq) (ref Reference))
  ((= (.sample ret) (.sample seq))
   (= (.at ret) (.at seq))))

; Aligners

(computation bowtie2 Alignment
  ((seq Seq) (ref Reference))
  ((= (.sample ret) (.sample seq))
   (= (.at ret) (.at seq))))

(computation star Alignment
  ((seq Seq) (ref Reference))
  ((= (.sample ret) (.sample seq))
   (= (.at ret) (.at seq))))

; Read summarization

(computation featureCounts ReadCounts
  ((a Alignment))
  ((= (.sample ret) (.sample a))
   (= (.at ret) (.at a))))

; Combine reads

(computation combine_reads ReadCountMatrix
  ((r1 ReadCounts) (r2 ReadCounts))
  ((= (.sample1 ret) (.sample r1))
   (= (.sample2 ret) (.sample r2))
   (= (.at ret) (.at r1))
   (= (.at r1) (.at r2))
   (= (.bc ret) 0)))

; Batch correction

(computation combat_seq ReadCountMatrix
  ((rcm ReadCountMatrix))
  ((= (.sample1 ret) (.sample1 rcm))
   (= (.sample2 ret) (.sample2 rcm))
   (= (.at ret) (.at rcm))
   (= (.bc rcm) 0)
   (= (.bc ret) 1)))

; Differential gene expression

(computation deseq2 DifferentialGeneExpression
  ((rcm ReadCountMatrix))
  ((= (.sample1 ret) (.sample1 rcm))
   (= (.sample2 ret) (.sample2 rcm))
   (= (.at ret) (.at rcm))))

; Pooled CRISPR screen

(input fact Transfection
  (.sample Str) (.at Int) (.library Str))

(output fact Enrichment
  (.sample Str) (.start Int) (.end Int))

(computation reference_from_transfection Reference
  ((t Transfection))
  ((= (.data ret) (.library t))))

(computation mageck Enrichment
  ((t Transfection) (s1 Seq) (s2 Seq))
  ((= (.sample ret) (.sample t))
   (= (.start ret) (.at s1))
   (= (.end ret) (.at s2))
   (= (.sample t) (.sample s1))
   (= (.sample t) (.sample s2))
   (< (.at t) (.at s1))
   (< (.at s1) (.at s2))))

(computation l2fc Enrichment
  ((r1 ReadCounts) (r2 ReadCounts))
  ((= (.start ret) (.at r1))
   (= (.end ret) (.at r2))
   (= (.sample ret) (.sample r1))
   (= (.sample ret) (.sample r2))
   (< (.at r1) (.at r2))))
