# Sequencing

[Prop.SeqFile]
params.sample = "Str"
params.at = "Int"
params.filename = "Str"

[Type.LoadedSeqFile]
params.sample = "Str"
params.at = "Int"
params.filename = "Str"

[Type.Seq]
params.sample = "Str"
params.at = "Int"

[Function.load_seq_file]
params = {}
ret = "LoadedSeqFile"
condition = [
    "SeqFile { sample = ret.sample, at = ret.at, filename = ret.filename }",
]

# TODO Candidate for inheritance? Mark as "identity" somehow?
[Function.seq_of_seq_file]
params.file = "LoadedSeqFile"
ret = "Seq"
condition = [
    "ret.sample = file.sample",
    "ret.at = file.at",
]

# Reference genome

[Prop.ReferenceGenomeFile]
params.filename = "Str"

[Type.LoadedReferenceGenomeFile]
params.filename = "Str"

[Type.ReferenceGenome]
params = {}

[Function.load_reference_genome_file]
params = {}
ret = "LoadedReferenceGenomeFile"
condition = [
    "ReferenceGenomeFile { filename = ret.filename }",
]

[Function.rg_of_rg_file]
params.file = "LoadedReferenceGenomeFile"
ret = "ReferenceGenome"
condition = []

[Function.hg38]
params = {}
ret = "ReferenceGenome"
condition = []

# Alignment

[Type.Alignment]
params.sample = "Str"
params.at = "Int"

# Read counts

[Type.ReadCounts]
params.sample = "Str"
params.at = "Int"

[Function.kallisto]
params.ref = "ReferenceGenome"
params.seq = "Seq"
ret = "ReadCounts"
condition = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

[Function.salmon]
params.ref = "ReferenceGenome"
params.seq = "Seq"
ret = "ReadCounts"
condition = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

# Read count matrix

[Type.ReadCountMatrix]
params.sample1 = "Str"
params.sample2 = "Str"
params.at = "Int"
params.bc = "Int"

# Differential gene expression

[Type.DifferentialGeneExpression]
params.sample1 = "Str"
params.sample2 = "Str"
params.at = "Int"

# Functions

# [Function.bowtie2]
# params.ref = "Reference"
# ret = "Alignment"
# condition = [
#     "Seq { sample = ret.sample, at = ret.at }"
# ]
# 
# 
# [Function.star]
# params.ref = "Reference"
# ret = "Alignment"
# condition = [
#     "Seq { sample = ret.sample, at = ret.at }"
# ]
# 
# [Function.featureCounts]
# params.a = "Alignment"
# ret = "ReadCounts"
# condition = [
#     "ret.sample = a.sample",
#     "ret.at = a.at",
# ]
# 
# [Function.combine_reads]
# params.r1 = "ReadCounts"
# params.r2 = "ReadCounts"
# ret = "ReadCountMatrix"
# condition = [
#     "ret.sample1 = r1.sample",
#     "ret.sample2 = r2.sample",
#     "ret.at = r1.at",
#     "ret.at = r2.at",
#     "ret.bc = 0"
# ]
# 
# [Function.combat_seq]
# params.rcm = "ReadCountMatrix"
# ret = "ReadCountMatrix"
# condition = [
#     "ret.sample1 = rcm.sample1",
#     "ret.sample2 = rcm.sample2",
#     "ret.at = rcm.at",
#     "rcm.bc = 0",
#     "ret.bc = 1",
# ]
# 
# [Function.deseq2]
# params.rcm = "ReadCountMatrix"
# ret = "DifferentialGeneExpression"
# condition = [
#     "ret.sample1 = rcm.sample1",
#     "ret.sample2 = rcm.sample2",
#     "ret.at = rcm.at",
# ]











# ; Pooled CRISPR screen
#
# (input fact Transfection
#   (.sample Str) (.at Int) (.library Str))
#
# (output fact Enrichment
#   (.sample Str) (.start Int) (.end Int))

### [Prop.Transfection]
### # TODO need to be able to add these
### # params.sample = "Str"
### # params.at = "Int"
### params.library = "Str"
### 
### [Type.Enrichment]
### name = "Enrichment"
### params.sample = "Str"
### params.start = "Int"
### params.end = "Int"
### 
### # (computation reference_from_transfection Reference
### #   ((t Transfection))
### #   ((= (.data ret) (.library t))))
### 
### [Function.reference_from_transfection]
### params = {}
### ret = "Reference"
### condition = [
###     "Transfection { library = ret.data }",
### ]
### 
### # (computation mageck Enrichment
### #   ((t Transfection) (s1 Seq) (s2 Seq))
### #   ((= (.sample ret) (.sample t))
### #    (= (.start ret) (.at s1))
### #    (= (.end ret) (.at s2))
### #    (= (.sample t) (.sample s1))
### #    (= (.sample t) (.sample s2))
### #    (< (.at t) (.at s1))
### #    (< (.at s1) (.at s2))))
### #
### # (computation l2fc Enrichment
### #   ((r1 ReadCounts) (r2 ReadCounts))
### #   ((= (.start ret) (.at r1))
### #    (= (.end ret) (.at r2))
### #    (= (.sample ret) (.sample r1))
### #    (= (.sample ret) (.sample r2))
### #    (< (.at r1) (.at r2))))
### 
### [Function.mageck]
### params.s1 = "Seq"
### params.s2 = "Seq"
### ret = "Enrichment"
### condition = [
###     "ret.sample = t.sample",
###     "ret.start = s1.at",
###     "ret.end = s2.at",
###     "t.sample = s1.sample",
###     "t.sample = s2.sample",
###     "t.at < s1.at",
###     "s1.at < s2.at",
### ]
### 
### [Function.l2fc]
### params.r1 = "ReadCounts"
### params.r2 = "ReadCounts"
### ret = "Enrichment"
### condition = [
###     "ret.start = r1.at",
###     "ret.end = r2.at",
###     "ret.sample = r1.sample",
###     "ret.sample = r2.sample",
###     "r1.at < r2.at",
### ]
