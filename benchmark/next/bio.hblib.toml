# ; Raw inputs
#
# (input fact Seq
#   (.sample Str) (.at Int) (.data Str))
#
# (input fact ReferenceGenome
#   (.data Str))

[[Fact]]
name = "Seq"
[params]
sample = "String"
at = "Int"
data = "String"


[[Fact]]
name = "ReferenceGenome"
[params]
data = "String"

# ; Datatypes
#
# (output fact Reference
#   (.data Str))
#
# (output fact Alignment
#   (.sample Str) (.at Int))
#
# (output fact ReadCounts
#   (.sample Str) (.at Int))
#
# (output fact ReadCountMatrix
#   (.sample1 Str) (.sample2 Str) (.at Int) (.bc Int))
#
# (output fact DifferentialGeneExpression
#   (.sample1 Str) (.sample2 Str) (.at Int))

[[Type]]
name = "Reference"
[params]
data = "String"

[[Type]]
name = "Alignment"
[params]
sample = "String"
at = "Int"

[[Type]]
name = "ReadCounts"
[params]
sample = "String"
at = "Int"

[[Type]]
name = "ReadCountMatrix"
[params]
sample1 = "String"
sample2 = "String"
at = "Int"
bc = "Int"

[[Type]]
name = "DifferentialGeneExpression"
[params]
sample1 = "String"
sample2 = "String"
at = "Int"

# ; Load reference genome
#
# (computation load_local_reference_genome Reference
#   ((rg ReferenceGenome))
#   ((= (.data ret) (.data rg))))
#
# (computation load_hg38 Reference () ())

[[Function]]
name = "load_local_reference_genome"
params.rg = "ReferenceGenome"
ret = "Reference"
predicate = [
    "ret.data == rg.data",
]

[[Function]]
name = "load_hg38"
params = []
ret = "ReferenceGenome"
predicate = []

# ; Quantifiers
#
# (computation kallisto ReadCounts
#   ((seq Seq) (ref Reference))
#   ((= (.sample ret) (.sample seq))
#    (= (.at ret) (.at seq))))
#
# (computation salmon ReadCounts
#   ((seq Seq) (ref Reference))
#   ((= (.sample ret) (.sample seq))
#    (= (.at ret) (.at seq))))

[[Function]]
name = "kallisto"
params.seq = "Seq"
params.ref = "Reference"
ret = "ReadCounts"
predicate = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

[[Function]]
name = "salmon"
params.seq = "Seq"
params.ref = "Reference"
ret = "ReadCounts"
predicate = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

# ; Aligners
#
# (computation bowtie2 Alignment
#   ((seq Seq) (ref Reference))
#   ((= (.sample ret) (.sample seq))
#    (= (.at ret) (.at seq))))
#
# (computation star Alignment
#   ((seq Seq) (ref Reference))
#   ((= (.sample ret) (.sample seq))
#    (= (.at ret) (.at seq))))

[[Function]]
name = "bowtie2"
params.seq = "Seq"
params.ref = "Reference"
ret = "Alignment"
predicate = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

[[Function]]
name = "star"
params.seq = "Seq"
params.ref = "Reference"
ret = "Alignment"
predicate = [
    "ret.sample = seq.sample",
    "ret.at = seq.at",
]

# ; Read summarization
#
# (computation featureCounts ReadCounts
#   ((a Alignment))
#   ((= (.sample ret) (.sample a))
#    (= (.at ret) (.at a))))

[[Function]]
name = "featureCounts"
params.a = "Alignment"
ret = "ReadCounts"
predicate = [
    "ret.sample = a.sample",
    "ret.at = a.at",
]

# ; Combine reads
#
# (computation combine_reads ReadCountMatrix
#   ((r1 ReadCounts) (r2 ReadCounts))
#   ((= (.sample1 ret) (.sample r1))
#    (= (.sample2 ret) (.sample r2))
#    (= (.at ret) (.at r1))
#    (= (.at r1) (.at r2))
#    (= (.bc ret) 0)))

[[Function]]
name = "combine_reads"
params.r1 = "ReadCounts"
params.r2 = "ReadCounts"
ret = "ReadCountMatrix"
predicate = [
    "ret.sample1 = r1.sample",
    "ret.sample2 = r2.sample",
    "ret.at = r1.at",
    "ret.at = r2.at",
    "ret.bc = 0"
]

# ; Batch correction
#
# (computation combat_seq ReadCountMatrix
#   ((rcm ReadCountMatrix))
#   ((= (.sample1 ret) (.sample1 rcm))
#    (= (.sample2 ret) (.sample2 rcm))
#    (= (.at ret) (.at rcm))
#    (= (.bc rcm) 0)
#    (= (.bc ret) 1)))

[[Function]]
name = "combat_seq"
params.rcm = "ReadCountMatrix"
ret = "ReadCountMatrix"
predicate = [
    "ret.sample1 = rcm.sample1",
    "ret.sample2 = rcm.sample2",
    "ret.at = rcm.at",
    "rcm.bc = 0",
    "ret.bc = 1",
]

# ; Differential gene expression
#
# (computation deseq2 DifferentialGeneExpression
#   ((rcm ReadCountMatrix))
#   ((= (.sample1 ret) (.sample1 rcm))
#    (= (.sample2 ret) (.sample2 rcm))
#    (= (.at ret) (.at rcm))))

[[Function]]
name = "deseq2"
params.rcm = "ReadCountMatrix"
ret = "DifferentialGeneExpression"
predicate = [
    "ret.sample1 = rcm.sample1",
    "ret.sample2 = rcm.sample2",
    "ret.at = rcm.at",
]

# ; Pooled CRISPR screen
#
# (input fact Transfection
#   (.sample Str) (.at Int) (.library Str))
#
# (output fact Enrichment
#   (.sample Str) (.start Int) (.end Int))

[[Fact]]
name = "Transfection"
params.sample = "String"
params.at = "Int"
params.library = "String"

[[Type]]
name = "Enrichment"
params.sample = "String"
params.start = "Int"
params.end = "Int"

# (computation reference_from_transfection Reference
#   ((t Transfection))
#   ((= (.data ret) (.library t))))

[[Function]]
name = "reference_from_transfection"
params.t = "Transfection"
ret = "Reference"
predicate = [
    "ret.data = t.library",
]

# (computation mageck Enrichment
#   ((t Transfection) (s1 Seq) (s2 Seq))
#   ((= (.sample ret) (.sample t))
#    (= (.start ret) (.at s1))
#    (= (.end ret) (.at s2))
#    (= (.sample t) (.sample s1))
#    (= (.sample t) (.sample s2))
#    (< (.at t) (.at s1))
#    (< (.at s1) (.at s2))))
#
# (computation l2fc Enrichment
#   ((r1 ReadCounts) (r2 ReadCounts))
#   ((= (.start ret) (.at r1))
#    (= (.end ret) (.at r2))
#    (= (.sample ret) (.sample r1))
#    (= (.sample ret) (.sample r2))
#    (< (.at r1) (.at r2))))

[[Function]]
name = "mageck"
params.t = "Transfection"
params.s1 = "Seq"
params.s2 = "Seq"
ret = "Enrichment"
predicate = [
    "ret.sample = t.sample",
    "ret.start = s1.at",
    "ret.end = s2.at",
    "t.sample = s1.sample",
    "t.sample = s2.sample",
    "t.at < s1.at",
    "s1.at < s2.at",
]

[[Function]]
name = "l2fc"
params.r1 = "ReadCounts"
params.r2 = "ReadCounts"
ret = "Enrichment"
predicate = [
    "ret.start = r1.at",
    "ret.end = r2.at",
    "ret.sample = r1.sample",
    "ret.sample = r2.sample",
    "r1.at < r2.at",
]
