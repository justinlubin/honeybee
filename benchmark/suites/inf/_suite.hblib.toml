################################################################################
### GENERIC FUNCTIONS ###
################################################################################

[Prop.In]
params.x = "Int"

[Type.Choice]
params.x = "Int"

[Function.choose]
params = {}
ret = "Choice"
condition = ["In { x = ret.x }"]

### small_three

[Type.SmallThree]
params = {}

[Function.st1]
params.in = "SmallThree"
ret = "SmallThree"
condition = []

[Function.st2]
params.in = "SmallThree"
ret = "SmallThree"
condition = []

[Function.st3]
params.in = "SmallThree"
ret = "SmallThree"
condition = []

[Function.st_end]
params.in = "Choice"
ret = "SmallThree"
condition = []

### big_three

[Type.BigThree]
params = {}

[Type.BigThree1]
params = {}

[Type.BigThree2]
params = {}

[Type.BigThree3]
params = {}

[Function.bt1_start]
params.in = "BigThree1"
ret = "BigThree"
condition = []

[Function.bt2_start]
params.in = "BigThree2"
ret = "BigThree"
condition = []

[Function.bt12]
params.in = "BigThree1"
ret = "BigThree2"
condition = []

[Function.bt23]
params.in = "BigThree2"
ret = "BigThree3"
condition = []

[Function.bt31]
params.in = "BigThree3"
ret = "BigThree1"
condition = []

[Function.bt2_end]
params.in = "Choice"
ret = "BigThree2"
condition = []

[Function.bt3_end]
params.in = "Choice"
ret = "BigThree3"
condition = []

### infinite_bin

[Type.Bin]
params = {}

[Function.branch]
params.left = "Bin"
params.right = "Bin"
ret = "Bin"
condition = []

[Function.leaf]
params.in = "Choice"
ret = "Bin"
condition = []

### eventually_stabilize

[Type.ES]
params.count = "Int"

[Function.es_lt]
params.in = "ES"
ret = "ES"
condition = ["ret.count < in.count"]

[Function.es_eq]
params.in = "ES"
ret = "ES"
condition = ["ret.count = in.count"]

[Function.es_end]
params.in = "Choice"
ret = "ES"
condition = ["ret.count = in.x"]

### staged_cycles

[Type.Cycle1]
params = {}

[Type.Cycle2]
params = {}

[Function.c10]
params.in = "Choice"
ret = "Cycle1"
condition = []

[Function.c1]
params.in = "Cycle1"
ret = "Cycle1"
condition = []

[Function.c12]
params.in = "Cycle1"
ret = "Cycle2"
condition = []

[Function.c2]
params.in = "Cycle2"
ret = "Cycle2"
condition = []

################################################################################
### GEOSPATIAL ANALYSES ###
################################################################################

# Raster

[Prop.ResolutionChoice]
params.val = "Int"

[Type.Resolution]
params.val = "Int"

[Function.choose_resolution]
params = {}
ret = "Resolution"
condition = ["ResolutionChoice { val = ret.val }"]

[Prop.CRSChoice]
params.val = "Str"

[Type.CRS]
params.val = "Str"

[Function.choose_crs]
params = {}
ret = "CRS"
condition = ["CRSChoice { val = ret.val }"]

[Prop.InputRaster]
params.name = "Str"
params.data = "Str"
params.resolution = "Int"
params.crs = "Str"
params.bands = "Int"
params.sensor = "Str"

[Type.LoadedInputRaster]
params.name = "Str"
params.data = "Str"
params.resolution = "Int"
params.crs = "Str"
params.bands = "Int"
params.sensor = "Str"

[Type.Raster]
params.name = "Str"
params.resolution = "Int"
params.crs = "Str"
params.bands = "Int"

[Function.load_input_raster]
params = {}
ret = "LoadedInputRaster"
condition = ["""InputRaster {
    name = ret.name,
    data = ret.data,
    resolution = ret.resolution,
    crs = ret.crs,
    bands = ret.bands,
    sensor = ret.sensor
}"""]

[Function.load_raster]
params.raster = "LoadedInputRaster"
ret = "Raster"
condition = [
    "ret.name = raster.name",
    "ret.resolution = raster.resolution",
    "ret.crs = raster.crs",
    "ret.bands = raster.bands",
]

# Resampling

[Prop.ResamplingMethodChoice]
params.val = "Str"

[Type.ResamplingMethod]
params.val = "Str"

[Function.choose_resampling_method]
params = {}
ret = "ResamplingMethod"
condition = ["ResamplingMethodChoice { val = ret.val }"]

[Function.resample]
params.raster = "Raster"
params.method = "ResamplingMethod"
params.res = "Resolution"
ret = "Raster"
condition = [
    "raster.resolution < ret.resolution",
    "0 < ret.resolution",
    "ret.crs = raster.crs",
    "ret.bands = raster.bands",
    "ret.name = raster.name",
    "ret.resolution = res.val",
]

# Warp

[Function.warp]
params.raster = "Raster"
params.c = "CRS"
ret = "Raster"
condition = [
    "ret.bands = raster.bands",
    "ret.crs = c.val",
    "ret.name = raster.name",
    "ret.resolution = raster.resolution",
]

# Mosaic

[Function.mosaic]
params.r1 = "Raster"
params.r2 = "Raster"
ret = "Raster"
condition = [
    "r1.bands = r2.bands",
    "ret.bands = r1.bands",
    "r1.crs = r2.crs",
    "ret.crs = r1.crs",
    "ret.name = r1.name",
    "ret.resolution = r1.resolution",
]

# Band extration

[Function.extract_band]
params.raster = "Raster"
ret = "Raster"
condition = [
    "ret.bands = 1",
    "ret.resolution = raster.resolution",
    "ret.name = raster.name",
    "ret.crs = raster.crs",
]

# Remote Sensing

[Function.ndvi]
params.raster = "Raster"
ret = "Raster"
condition = [
    "1 < raster.bands",
    "ret.bands = 1",
    "ret.resolution = raster.resolution",
    "ret.name = raster.name",
    "ret.crs = raster.crs",
]

[Function.ndwi]
params.raster = "Raster"
ret = "Raster"
condition = [
    "1 < raster.bands",
    "ret.bands = 1",
    "ret.resolution = raster.resolution",
    "ret.name = raster.name",
    "ret.crs = raster.crs",
]

# Vector

[Prop.InputVector]
params.name = "Str"
params.data = "Str"
params.crs = "Str"

[Type.LoadedInputVector]
params.name = "Str"
params.data = "Str"
params.crs = "Str"

[Type.Vector]
params.name = "Str"
params.crs = "Str"

[Function.load_input_vector]
params = {}
ret = "LoadedInputVector"
condition = [
    "InputVector { name = ret.name, data = ret.data, crs = ret.crs }"
]

[Function.load_vector]
params.vector = "LoadedInputVector"
ret = "Vector"
condition = [
    "ret.name = vector.name",
    "ret.crs = vector.crs",
]

# Reproject

[Function.reproject]
params.vector = "Vector"
ret = "Vector"
condition = []

# Clip

[Function.clip_raster]
params.raster = "Raster"
params.mask = "Vector"
ret = "Raster"
condition = [
    "raster.crs = mask.crs",
    "ret.crs = raster.crs",
    "ret.name = raster.name",
    "ret.resolution = raster.resolution",
    "ret.bands = raster.bands",
]

# Rename

[Function.rename]
params.raster = "Raster"
ret = "Raster"
condition = [
    "ret.crs = raster.crs",
    "ret.resolution = raster.resolution",
    "ret.bands = raster.bands",
]
